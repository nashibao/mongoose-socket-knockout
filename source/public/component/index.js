// Generated by CoffeeScript 1.8.0
var $, ApplicationViewModel, Model, SocketAdapter, Storage, app, mongoose_knockout, oa, oo, socket,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

oo = ko.observable;

oa = ko.observableArray;

$ = require('jquery');

mongoose_knockout = require('./mongoose-knockout');

Model = mongoose_knockout.Model;

SocketAdapter = mongoose_knockout.adapter.socket;

SocketAdapter.host("http://localhost:3001");

socket = SocketAdapter.create_socket('test', io);

Storage = require('./mongoose-knockout/storage');

ApplicationViewModel = (function() {
  function ApplicationViewModel() {
    this.remove = __bind(this.remove, this);
    this.update = __bind(this.update, this);
    this.create = __bind(this.create, this);
    this.load_more = __bind(this.load_more, this);
    this.view_page = __bind(this.view_page, this);
    var adapter;
    adapter = new SocketAdapter({
      socket: socket
    });
    this.messages_model = new Model({
      name_space: 'test',
      collection_name: 'message',
      adapter: adapter
    });
    this.messages = this.messages_model.find({});
    this.msg = this.messages_model.findOne({});
    this.count = this.messages_model.count({});
    this.calculated = this.messages_model.aggregate({
      array: [
        {
          $group: {
            _id: 'sum',
            count: {
              $sum: 1
            },
            number_sum: {
              $sum: '$number'
            }
          }
        }
      ]
    });
    this.content = oo("");
    this.storage = new Storage({
      host: "http://localhost:3001"
    });
    this.storage.get((function(_this) {
      return function(session) {
        console.log('storage get', session);
        return _this.storage.update(function(session) {
          return session.hello = "world";
        });
      };
    })(this));
  }

  ApplicationViewModel.prototype.view_page = function(page) {
    this.messages.query.more = false;
    this.messages.query.page = page;
    return this.messages.update();
  };

  ApplicationViewModel.prototype.load_more = function() {
    return this.messages.tail();
  };

  ApplicationViewModel.prototype.create = function() {
    var bl, rnd;
    rnd = Math.floor(Math.random() * 10);
    bl = this.messages_model.create({
      doc: {
        'content': this.content(),
        'number': rnd
      }
    });
    if (bl) {
      return this.content("");
    }
  };

  ApplicationViewModel.prototype.update = function(doc) {
    return this.messages_model.update({
      conditions: {
        '_id': doc._id
      },
      update: doc
    });
  };

  ApplicationViewModel.prototype.remove = function(doc) {
    return this.messages_model.remove({
      conditions: {
        '_id': doc._id
      }
    });
  };

  return ApplicationViewModel;

})();

app = app || {};

app.vm = new ApplicationViewModel;

$(document).ready((function(_this) {
  return function() {
    return ko.applyBindings(app.vm);
  };
})(this));

module.exports = app;
